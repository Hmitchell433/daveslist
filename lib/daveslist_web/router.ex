defmodule DaveslistWeb.Router do
  use DaveslistWeb, :router

  pipeline :browser do
    plug :accepts, ["html"]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, {DaveslistWeb.LayoutView, :root}
    plug :protect_from_forgery
    plug :put_secure_browser_headers
  end

  pipeline :api do
    plug :accepts, ["json"]
  end

  pipeline :auth do
    plug Daveslist.UserManager.Pipeline
  end

 pipeline :ensure_auth do
   plug Guardian.Plug.EnsureAuthenticated
 end

  scope "/", DaveslistWeb do

    get "/", PageController, :index
    get "/login", UserController, :index
    post "/login", UserController, :login
    get "/verify", UserController, :verify

  end

  # Other scopes may use custom stacks.
   scope "/api", DaveslistWeb do
     pipe_through :api

     post "/login", UserController, :login
     post "/signup", UserController, :create
     get "/public-listings", ListingController, :public_listings
   end

   scope "/api", DaveslistWeb do
    pipe_through [:api, :auth, :ensure_auth]

    # get "/listing", ListingController, :new
    # post "/listing", ListingController, :create
    # get "/listing/:id", ListingController, :show

    delete "/category/:id/delete", CategoryController, :delete
    post "/category", CategoryController, :create


    get "/listings", ListingController, :all_listings
    post "/listings", ListingController, :create
    delete "/listings/:id/delete", ListingController, :delete
    post "/listings/reply", ReplyController, :create
    get "/listings/:id/edit", ListingController, :edit
   end

  #  def swagger_info do
  #   %{
  #     info: %{
  #       version: "1.0",
  #       title: "Daves List",
  #       securityDefinitions: %{
  #         Bearer: %{
  #           type: "http",
  #           name: "Authorization",
  #           in: "header",
  #           description:
  #             ~s(For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.\n\n) <>
  #             ~s(A valid JWT token is generated by the API and returned as answer of a call to the route **/sign_in** giving a valid app, login and password.\n\n\n) <>
  #             ~s(The following syntax must be used in the 'Authorization' header :\n\n**Authorization:** Bearer {{JWT Token}} - In the below field Just Pass "`Bearer {{JWT Token}}`".),
  #         }
  #       }
  #     }
  #   }
  # end


  def swagger_info do
    %{
      schemes: ["http", "https", "ws", "wss"],
      info: %{
        version: "1.0",
        title: "Daves List",
        description: "API Documentation for MyAPI v1",
        termsOfService: "Open for public",
      },
      securityDefinitions: %{
        Bearer: %{
          type: "apiKey",
          name: "Authorization",
          description:
          "API Token must be provided via `Authorization: Bearer ` header",
          in: "header"
        }
      },
      consumes: ["application/json"],
      produces: ["application/json"],
      tags: [
        %{name: "Users", description: "User resources"},
      ]
    }
  end


  scope "/api/swagger" do
    forward "/", PhoenixSwagger.Plug.SwaggerUI, otp_app: :daveslist, swagger_file: "swagger.json"
  end

  # Enables LiveDashboard only for development
  #
  # If you want to use the LiveDashboard in production, you should put
  # it behind authentication and allow only admins to access it.
  # If your application does not have an admins-only section yet,
  # you can use Plug.BasicAuth to set up some basic authentication
  # as long as you are also using SSL (which you should anyway).
  if Mix.env() in [:dev, :test] do
    import Phoenix.LiveDashboard.Router

    scope "/" do
      pipe_through :browser

      live_dashboard "/dashboard", metrics: DaveslistWeb.Telemetry
    end
  end

  # Enables the Swoosh mailbox preview in development.
  #
  # Note that preview only shows emails that were sent by the same
  # node running the Phoenix server.
  if Mix.env() == :dev do
    scope "/dev" do
      pipe_through :browser

      forward "/mailbox", Plug.Swoosh.MailboxPreview
    end
  end
end
